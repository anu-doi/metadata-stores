package au.edu.anu.metadatastores.datamodel.store;

// Generated 27/02/2013 10:39:19 AM by Hibernate Tools 4.0.0

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.DiscriminatorColumn;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;

/**
 * Item generated by hbm2java
 */
@Entity
@Table(name = "item", schema = "public", uniqueConstraints = @UniqueConstraint(columnNames = {
		"ext_system", "ext_id" }))
@DiscriminatorColumn(name="ext_system")
@FilterDef(name="attributes")
public class Item implements java.io.Serializable {
	private static final long serialVersionUID = 1L;

	private Long iid;
	private String title;
	private String extSystem;
	private String extId;
	private Boolean deleted;
	private Set<ItemRelation> itemRelationsForIid = new HashSet<ItemRelation>(0);
	private Set<ItemRelation> itemRelationsForRelatedIid = new HashSet<ItemRelation>(0);
	private Set<PotentialRelation> potentialRelationsForRelatedIid = new HashSet<PotentialRelation>(0);
	private Set<PotentialRelation> potentialRelationsForIid = new HashSet<PotentialRelation>(0);
	private Set<ItemAttribute> itemAttributes = new HashSet<ItemAttribute>(0);
	private Set<HistItemAttribute> histItemAttributes = new HashSet<HistItemAttribute>(0);

	public Item() {
	}

	public Item(Long iid, String extSystem, String extId) {
		this.iid = iid;
		this.extSystem = extSystem;
		this.extId = extId;
	}

	public Item(Long iid, String title, String extSystem, String extId,
			Boolean deleted, Set<ItemRelation> itemRelationsForIid,
			Set<ItemRelation> itemRelationsForRelatedIid,
			Set<PotentialRelation> potentialRelationsForRelatedIid, Set<PotentialRelation> potentialRelationsForIid,
			Set<ItemAttribute> itemAttributes) {
		this.iid = iid;
		this.title = title;
		this.extSystem = extSystem;
		this.extId = extId;
		this.deleted = deleted;
		this.itemRelationsForIid = itemRelationsForIid;
		this.itemRelationsForRelatedIid = itemRelationsForRelatedIid;
		this.potentialRelationsForRelatedIid = potentialRelationsForRelatedIid;
		this.potentialRelationsForIid = potentialRelationsForIid;
		this.itemAttributes = itemAttributes;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "iid", unique = true, nullable = false)
	public Long getIid() {
		return this.iid;
	}

	public void setIid(Long iid) {
		this.iid = iid;
	}

	@Column(name = "title")
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "ext_system", nullable = false, length = 50, insertable=false, updatable=false)
	public String getExtSystem() {
		return this.extSystem;
	}

	public void setExtSystem(String extSystem) {
		this.extSystem = extSystem;
	}

	@Column(name = "ext_id", nullable = false)
	public String getExtId() {
		return this.extId;
	}

	public void setExtId(String extId) {
		this.extId = extId;
	}

	@Column(name = "deleted")
	public Boolean getDeleted() {
		return this.deleted;
	}

	public void setDeleted(Boolean deleted) {
		this.deleted = deleted;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "itemByIid")
	@Cascade(CascadeType.ALL)
	@NotFound(action=NotFoundAction.IGNORE)
	public Set<ItemRelation> getItemRelationsForIid() {
		return this.itemRelationsForIid;
	}

	public void setItemRelationsForIid(Set<ItemRelation> itemRelationsForIid) {
		this.itemRelationsForIid = itemRelationsForIid;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "itemByRelatedIid")
	@Cascade(CascadeType.ALL)
	@NotFound(action=NotFoundAction.IGNORE)
	public Set<ItemRelation> getItemRelationsForRelatedIid() {
		return this.itemRelationsForRelatedIid;
	}

	public void setItemRelationsForRelatedIid(Set<ItemRelation> itemRelationsForRelatedIid) {
		this.itemRelationsForRelatedIid = itemRelationsForRelatedIid;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "itemByRelatedIid")
	@Cascade(CascadeType.ALL)
	@NotFound(action=NotFoundAction.IGNORE)
	public Set<PotentialRelation> getPotentialRelationsForRelatedIid() {
		return this.potentialRelationsForRelatedIid;
	}

	public void setPotentialRelationsForRelatedIid(
			Set<PotentialRelation> potentialRelationsForRelatedIid) {
		this.potentialRelationsForRelatedIid = potentialRelationsForRelatedIid;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "itemByIid")
	@Cascade(CascadeType.ALL)
	@NotFound(action=NotFoundAction.IGNORE)
	public Set<PotentialRelation> getPotentialRelationsForIid() {
		return this.potentialRelationsForIid;
	}

	public void setPotentialRelationsForIid(Set<PotentialRelation> potentialRelationsForIid) {
		this.potentialRelationsForIid = potentialRelationsForIid;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "item")
	@Cascade(CascadeType.ALL)
	@NotFound(action=NotFoundAction.IGNORE)
	public Set<ItemAttribute> getItemAttributes() {
		return this.itemAttributes;
	}

	public void setItemAttributes(Set<ItemAttribute> itemAttributes) {
		this.itemAttributes = itemAttributes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "item")
	@Cascade(CascadeType.ALL)
	@NotFound(action=NotFoundAction.IGNORE)
	public Set<HistItemAttribute> getHistItemAttributes() {
		return histItemAttributes;
	}

	public void setHistItemAttributes(Set<HistItemAttribute> histItemAttributes) {
		this.histItemAttributes = histItemAttributes;
	}

}
